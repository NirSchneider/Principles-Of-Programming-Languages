#lang racket
(define append 
  (lambda(lst1 lst2)
      (if (eq? lst1 '()) 
      lst2
      (cons (car lst1) 
            (append(cdr lst1) lst2))))
  )
;;(append '(1 2) '(3 4))

(define reverse 
  (lambda (lst)
        (if (eq? lst '())
     null
     (append (reverse (cdr lst)) (list (car lst)))
  )
  )
)
;;(reverse '(1 2 3))

(define dup
  (lambda (lst num2)
    (if (eq? num2 0)
        '()
    (if (eq? num2 1)
        lst
        (dup (append (list(car lst)) lst) (- num2 1))))))

(define duplicate-items
   (lambda(lst dup-count)
      (if (eq? lst '())
          lst
          (append (dup (list(car lst)) (car dup-count)) (duplicate-items (cdr lst) (append (cdr dup-count) (list(car dup-count))))))))

;;(duplicate-items '(1 2 3) '(1 0))
;;(duplicate-items '(1 2 3) '(2 1 0 10 2))

(define findValue
  (lambda(idx lst)
        (if (= idx 1) (car lst)
        (findValue (- idx 1) (cdr lst))))
)

(define findvalue
  (lambda (index lst)
    (if(= index 1) (car lst)
       (findvalue (- index 1) (cdr lst)))
    )
  )
                  

;;Signature: payment(n coins-lst)
;;Type: [number*[List(T1) ; List(T1) ]
;; Purpose: 
;; Pre-condition: none
;; Tests:(payment 10 â€˜(5 5 10)) â†’ 2)


(define change
  (lambda(sum coins)
  (if (< sum 0)
      0
      (if (= sum 0)
          1
          (if (eq? coins '())
          0
          (+ (change (- sum (car coins)) (cdr coins)) (change sum (cdr coins))))))
    )
  )


(change 10 '(5 5 10));; (5 10) (2 1)
(change 5 '(1 1 1 2 2 5 10));; (1 2 5 10) (3 2 1 1)


(define (counter lst) 
        (if (eq? lst '())
         '()
        (cons (cons (count_help (car lst) lst) (car lst))
              (counter (delete (car lst) lst)))))

(define (count_help x lst)
        (cond ((eq? lst '()) 0)
        ((eq? x (car lst)) (+ 1 (count_help x (cdr lst))))
        (else   (count_help x (cdr lst)))))

(define delete
  (lambda (item list)
    (cond
      ((eq? list '()) '())
     ((eq? item (car list)) (delete item (cdr list)))
     (else (cons (car list) (delete item (cdr list)))))))

(counter '(1 1 1 2 2 5 10))

(define decrese
  (lambda (coins-list)
    (cons (cons (- (caar coins-list) 1) (cdar coins-list)) (cdr coins-list))))
    
;(decrese(counter '(1 1 1 2 2 5 10)))
    

(define paymentMain
  (lambda (sum coins-lst)
    (payment (sum (counter coins-lst)))))

(define payment
  (lambda (sum coins-lst)
    (if (eq? (caar coins-lst) 0)
        (payment sum (cdr coins-lst))
    (if (< sum 0)
      0
      (if (= sum 0)
          1
          (if (eq? coins-lst '())
          0
          (+ (payment (- sum (cdar coins-lst)) (decrese coins-lst)) (payment sum (cdr coins-lst)))))))))

(paymentMain 10 '( 5 5 10))
